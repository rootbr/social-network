/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.rootbr.network.adapter.in.rest.api;

import java.math.BigDecimal;
import com.rootbr.network.domain.port.rest.model.LoginPost500ResponseRestDto;
import com.rootbr.network.domain.port.rest.model.PostCreatePostRequestRestDto;
import com.rootbr.network.domain.port.rest.model.PostRestDto;
import com.rootbr.network.domain.port.rest.model.PostUpdatePutRequestRestDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-04T22:50:29.295949+02:00[Europe/Berlin]", comments = "Generator version: 7.13.0")
@Validated
public interface PostRestApi {

    /**
     * POST /post/create
     *
     * @param postCreatePostRequestRestDto  (optional)
     * @return Успешно создан пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/post/create",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<String> postCreatePost(
         @Valid @RequestBody(required = false) PostCreatePostRequestRestDto postCreatePostRequestRestDto
    );


    /**
     * PUT /post/delete/{id}
     *
     * @param id  (required)
     * @return Успешно удален пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/post/delete/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<Void> postDeleteIdPut(
         @PathVariable("id") String id
    );


    /**
     * GET /post/feed
     *
     * @param offset  (optional, default to 0)
     * @param limit  (optional, default to 10)
     * @return Успешно получены посты друзей (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/post/feed",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<PostRestDto>> postFeedGet(
        @DecimalMin("0")  @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") BigDecimal offset,
        @DecimalMin("1")  @Valid @RequestParam(value = "limit", required = false, defaultValue = "10") BigDecimal limit
    );


    /**
     * GET /post/get/{id}
     *
     * @param id  (required)
     * @return Успешно получен пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/post/get/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<PostRestDto> postGetIdGet(
         @PathVariable("id") String id
    );


    /**
     * PUT /post/update
     *
     * @param postUpdatePutRequestRestDto  (optional)
     * @return Успешно изменен пост (status code 200)
     *         or Невалидные данные ввода (status code 400)
     *         or Неавторизованный доступ (status code 401)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/post/update",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<Void> postUpdatePut(
         @Valid @RequestBody(required = false) PostUpdatePutRequestRestDto postUpdatePutRequestRestDto
    );

}
