/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.13.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.rootbr.network.adapter.in.rest.api;

import com.rootbr.network.domain.port.rest.model.LoginPost500ResponseRestDto;
import com.rootbr.network.domain.port.rest.model.UserRegisterPost200ResponseRestDto;
import com.rootbr.network.domain.port.rest.model.UserRegisterPostRequestRestDto;
import com.rootbr.network.domain.port.rest.model.UserRestDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-04T22:50:29.295949+02:00[Europe/Berlin]", comments = "Generator version: 7.13.0")
@Validated
public interface UserRestApi {

    /**
     * GET /user/get/{id}
     * Получение анкеты пользователя
     *
     * @param id Идентификатор пользователя (required)
     * @return Успешное получение анкеты пользователя (status code 200)
     *         or Невалидные данные (status code 400)
     *         or Анкета не найдена (status code 404)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/get/{id}",
        produces = { "application/json" }
    )
    
    ResponseEntity<UserRestDto> userGetIdGet(
         @PathVariable("id") String id
    );


    /**
     * POST /user/register
     * Регистрация нового пользователя
     *
     * @param userRegisterPostRequestRestDto  (optional)
     * @return Успешная регистрация (status code 200)
     *         or Невалидные данные (status code 400)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/user/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<UserRegisterPost200ResponseRestDto> userRegisterPost(
         @Valid @RequestBody(required = false) UserRegisterPostRequestRestDto userRegisterPostRequestRestDto
    );


    /**
     * GET /user/search
     * Поиск анкет
     *
     * @param firstName Условие поиска по имени (required)
     * @param lastName Условие поиска по фамилии (required)
     * @return Успешные поиск пользователя (status code 200)
     *         or Невалидные данные (status code 400)
     *         or Ошибка сервера (status code 500)
     *         or Ошибка сервера (status code 503)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/user/search",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<UserRestDto>> userSearchGet(
        @NotNull  @Valid @RequestParam(value = "first_name", required = true) String firstName,
        @NotNull  @Valid @RequestParam(value = "last_name", required = true) String lastName
    );

}
